# 1. Configuração do Provider AWS multi-região
provider "aws" {
  alias  = "virginia"
  region = "us-east-1"
}

provider "aws" {
  alias  = "sao_paulo"
  region = "sa-east-1"
}

# 2. Módulo para VPC (reutilizável por região)
module "vpc" {
  for_each = {
    virginia  = { cidr = "10.12.0.0/16", provider_alias = "virginia" },
    sao_paulo = { cidr = "10.11.0.0/16", provider_alias = "sao_paulo" }
  }
  providers = { aws = aws[each.value.provider_alias] }

  source  = "terraform-aws-modules/vpc/aws"
  version = "~> 3.0"

  name               = "${each.key}-vpc"
  cidr               = each.value.cidr
  azs                = ["${each.key == "virginia" ? "us-east-1a" : "sa-east-1a"}"]
  public_subnets     = [cidrsubnet(each.value.cidr, 8, 1)] # Ex: 10.12.1.0/24
  private_subnets    = [cidrsubnet(each.value.cidr, 8, 2)] # Ex: 10.12.2.0/24
  enable_nat_gateway = true
}

# 3. VPC Peering (conexão entre regiões)
resource "aws_vpc_peering_connection" "cross_region" {
  provider    = aws.virginia
  vpc_id      = module.vpc["virginia"].vpc_id
  peer_vpc_id = module.vpc["sao_paulo"].vpc_id
  peer_region = "sa-east-1"

  auto_accept = false
}

# 4. Aceitar o Peering na região sa-east-1
resource "aws_vpc_peering_connection_accepter" "sao_paulo" {
  provider                  = aws.sao_paulo
  vpc_peering_connection_id = aws_vpc_peering_connection.cross_region.id
  auto_accept               = true
}

# 5. Security Groups (Liberar ICMP e SSH entre VPCs)
resource "aws_security_group" "allow_tests" {
  for_each    = module.vpc
  provider    = aws[each.value.provider_alias]
  name_prefix = "allow_tests_"
  vpc_id      = each.value.vpc_id

  ingress {
    from_port   = -1 # ICMP
    to_port     = -1
    protocol    = "icmp"
    cidr_blocks = [each.value.cidr_block]
  }

  ingress {
    from_port   = 22 # SSH
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # Restrinja em produção!
  }
}

# 6. EC2 em subnets públicas (uma por região)
resource "aws_instance" "test_instance" {
  for_each        = module.vpc
  provider        = aws[each.value.provider_alias]
  ami             = "ami-12345678" # Substitua por AMIs válidas
  instance_type   = "t3.micro"
  subnet_id       = each.value.public_subnets[0]
  security_groups = [aws_security_group.allow_tests[each.key].id]

  tags = {
    Name = "test-instance-${each.key}"
  }
}

# 7. Rotas para o VPC Peering
resource "aws_route" "peering_routes" {
  for_each = module.vpc

  provider                  = aws[each.value.provider_alias]
  route_table_id            = each.value.public_route_table_ids[0]
  destination_cidr_block    = each.key == "virginia" ? "10.11.0.0/16" : "10.12.0.0/16"
  vpc_peering_connection_id = aws_vpc_peering_connection.cross_region.id
}
